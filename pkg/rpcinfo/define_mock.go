// Code generated by MockGen. DO NOT EDIT.
// Source: define.go
//
// Generated by this command:
//
//	mockgen -source=define.go -destination ./define_mock.go -package rpcinfo
//

// Package rpcinfo is a generated GoMock package.
package rpcinfo

import (
	context "context"
	net "net"
	reflect "reflect"

	service "gitlab.dev.wiqun.com/tl/goserver/chat/l2/tl.gorpc.git/pkg/service"
	uerror "gitlab.dev.wiqun.com/tl/goserver/chat/l2/tl.gorpc.git/pkg/uerror"
	gomock "go.uber.org/mock/gomock"
)

// MockFlagInfo is a mock of FlagInfo interface.
type MockFlagInfo struct {
	ctrl     *gomock.Controller
	recorder *MockFlagInfoMockRecorder
}

// MockFlagInfoMockRecorder is the mock recorder for MockFlagInfo.
type MockFlagInfoMockRecorder struct {
	mock *MockFlagInfo
}

// NewMockFlagInfo creates a new mock instance.
func NewMockFlagInfo(ctrl *gomock.Controller) *MockFlagInfo {
	mock := &MockFlagInfo{ctrl: ctrl}
	mock.recorder = &MockFlagInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagInfo) EXPECT() *MockFlagInfoMockRecorder {
	return m.recorder
}

// TraceInfo mocks base method.
func (m *MockFlagInfo) TraceInfo() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceInfo")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// TraceInfo indicates an expected call of TraceInfo.
func (mr *MockFlagInfoMockRecorder) TraceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceInfo", reflect.TypeOf((*MockFlagInfo)(nil).TraceInfo))
}

// MockFlagInfoSetter is a mock of FlagInfoSetter interface.
type MockFlagInfoSetter struct {
	ctrl     *gomock.Controller
	recorder *MockFlagInfoSetterMockRecorder
}

// MockFlagInfoSetterMockRecorder is the mock recorder for MockFlagInfoSetter.
type MockFlagInfoSetterMockRecorder struct {
	mock *MockFlagInfoSetter
}

// NewMockFlagInfoSetter creates a new mock instance.
func NewMockFlagInfoSetter(ctrl *gomock.Controller) *MockFlagInfoSetter {
	mock := &MockFlagInfoSetter{ctrl: ctrl}
	mock.recorder = &MockFlagInfoSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagInfoSetter) EXPECT() *MockFlagInfoSetterMockRecorder {
	return m.recorder
}

// SetTraceInfo mocks base method.
func (m *MockFlagInfoSetter) SetTraceInfo(traceInfo []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTraceInfo", traceInfo)
}

// SetTraceInfo indicates an expected call of SetTraceInfo.
func (mr *MockFlagInfoSetterMockRecorder) SetTraceInfo(traceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceInfo", reflect.TypeOf((*MockFlagInfoSetter)(nil).SetTraceInfo), traceInfo)
}

// MockInvocation is a mock of Invocation interface.
type MockInvocation struct {
	ctrl     *gomock.Controller
	recorder *MockInvocationMockRecorder
}

// MockInvocationMockRecorder is the mock recorder for MockInvocation.
type MockInvocationMockRecorder struct {
	mock *MockInvocation
}

// NewMockInvocation creates a new mock instance.
func NewMockInvocation(ctrl *gomock.Controller) *MockInvocation {
	mock := &MockInvocation{ctrl: ctrl}
	mock.recorder = &MockInvocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvocation) EXPECT() *MockInvocationMockRecorder {
	return m.recorder
}

// BizError mocks base method.
func (m *MockInvocation) BizError() uerror.BizError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BizError")
	ret0, _ := ret[0].(uerror.BizError)
	return ret0
}

// BizError indicates an expected call of BizError.
func (mr *MockInvocationMockRecorder) BizError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BizError", reflect.TypeOf((*MockInvocation)(nil).BizError))
}

// MethodInfo mocks base method.
func (m *MockInvocation) MethodInfo() service.MethodInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodInfo")
	ret0, _ := ret[0].(service.MethodInfo)
	return ret0
}

// MethodInfo indicates an expected call of MethodInfo.
func (mr *MockInvocationMockRecorder) MethodInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodInfo", reflect.TypeOf((*MockInvocation)(nil).MethodInfo))
}

// MethodName mocks base method.
func (m *MockInvocation) MethodName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MethodName indicates an expected call of MethodName.
func (mr *MockInvocationMockRecorder) MethodName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodName", reflect.TypeOf((*MockInvocation)(nil).MethodName))
}

// PackageName mocks base method.
func (m *MockInvocation) PackageName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PackageName indicates an expected call of PackageName.
func (mr *MockInvocationMockRecorder) PackageName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageName", reflect.TypeOf((*MockInvocation)(nil).PackageName))
}

// SeqID mocks base method.
func (m *MockInvocation) SeqID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeqID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// SeqID indicates an expected call of SeqID.
func (mr *MockInvocationMockRecorder) SeqID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeqID", reflect.TypeOf((*MockInvocation)(nil).SeqID))
}

// ServiceImpl mocks base method.
func (m *MockInvocation) ServiceImpl() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceImpl")
	ret0, _ := ret[0].(any)
	return ret0
}

// ServiceImpl indicates an expected call of ServiceImpl.
func (mr *MockInvocationMockRecorder) ServiceImpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceImpl", reflect.TypeOf((*MockInvocation)(nil).ServiceImpl))
}

// ServiceName mocks base method.
func (m *MockInvocation) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockInvocationMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockInvocation)(nil).ServiceName))
}

// TraceInfo mocks base method.
func (m *MockInvocation) TraceInfo() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceInfo")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// TraceInfo indicates an expected call of TraceInfo.
func (mr *MockInvocationMockRecorder) TraceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceInfo", reflect.TypeOf((*MockInvocation)(nil).TraceInfo))
}

// MockInvocationSetter is a mock of InvocationSetter interface.
type MockInvocationSetter struct {
	ctrl     *gomock.Controller
	recorder *MockInvocationSetterMockRecorder
}

// MockInvocationSetterMockRecorder is the mock recorder for MockInvocationSetter.
type MockInvocationSetterMockRecorder struct {
	mock *MockInvocationSetter
}

// NewMockInvocationSetter creates a new mock instance.
func NewMockInvocationSetter(ctrl *gomock.Controller) *MockInvocationSetter {
	mock := &MockInvocationSetter{ctrl: ctrl}
	mock.recorder = &MockInvocationSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvocationSetter) EXPECT() *MockInvocationSetterMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockInvocationSetter) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockInvocationSetterMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockInvocationSetter)(nil).Reset))
}

// SetBizError mocks base method.
func (m *MockInvocationSetter) SetBizError(err uerror.BizError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBizError", err)
}

// SetBizError indicates an expected call of SetBizError.
func (mr *MockInvocationSetterMockRecorder) SetBizError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBizError", reflect.TypeOf((*MockInvocationSetter)(nil).SetBizError), err)
}

// SetExtra mocks base method.
func (m *MockInvocationSetter) SetExtra(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtra", key, value)
}

// SetExtra indicates an expected call of SetExtra.
func (mr *MockInvocationSetterMockRecorder) SetExtra(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtra", reflect.TypeOf((*MockInvocationSetter)(nil).SetExtra), key, value)
}

// SetMethodInfo mocks base method.
func (m *MockInvocationSetter) SetMethodInfo(arg0 service.MethodInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMethodInfo", arg0)
}

// SetMethodInfo indicates an expected call of SetMethodInfo.
func (mr *MockInvocationSetterMockRecorder) SetMethodInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMethodInfo", reflect.TypeOf((*MockInvocationSetter)(nil).SetMethodInfo), arg0)
}

// SetMethodName mocks base method.
func (m *MockInvocationSetter) SetMethodName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMethodName", name)
}

// SetMethodName indicates an expected call of SetMethodName.
func (mr *MockInvocationSetterMockRecorder) SetMethodName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMethodName", reflect.TypeOf((*MockInvocationSetter)(nil).SetMethodName), name)
}

// SetPackageName mocks base method.
func (m *MockInvocationSetter) SetPackageName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPackageName", name)
}

// SetPackageName indicates an expected call of SetPackageName.
func (mr *MockInvocationSetterMockRecorder) SetPackageName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPackageName", reflect.TypeOf((*MockInvocationSetter)(nil).SetPackageName), name)
}

// SetSeqID mocks base method.
func (m *MockInvocationSetter) SetSeqID(seqID uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSeqID", seqID)
}

// SetSeqID indicates an expected call of SetSeqID.
func (mr *MockInvocationSetterMockRecorder) SetSeqID(seqID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeqID", reflect.TypeOf((*MockInvocationSetter)(nil).SetSeqID), seqID)
}

// SetServiceImpl mocks base method.
func (m *MockInvocationSetter) SetServiceImpl(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServiceImpl", arg0)
}

// SetServiceImpl indicates an expected call of SetServiceImpl.
func (mr *MockInvocationSetterMockRecorder) SetServiceImpl(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceImpl", reflect.TypeOf((*MockInvocationSetter)(nil).SetServiceImpl), arg0)
}

// SetServiceName mocks base method.
func (m *MockInvocationSetter) SetServiceName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServiceName", name)
}

// SetServiceName indicates an expected call of SetServiceName.
func (mr *MockInvocationSetterMockRecorder) SetServiceName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceName", reflect.TypeOf((*MockInvocationSetter)(nil).SetServiceName), name)
}

// SetTraceInfo mocks base method.
func (m *MockInvocationSetter) SetTraceInfo(traceInfo []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTraceInfo", traceInfo)
}

// SetTraceInfo indicates an expected call of SetTraceInfo.
func (mr *MockInvocationSetterMockRecorder) SetTraceInfo(traceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceInfo", reflect.TypeOf((*MockInvocationSetter)(nil).SetTraceInfo), traceInfo)
}

// MockEndpointInfo is a mock of EndpointInfo interface.
type MockEndpointInfo struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointInfoMockRecorder
}

// MockEndpointInfoMockRecorder is the mock recorder for MockEndpointInfo.
type MockEndpointInfoMockRecorder struct {
	mock *MockEndpointInfo
}

// NewMockEndpointInfo creates a new mock instance.
func NewMockEndpointInfo(ctrl *gomock.Controller) *MockEndpointInfo {
	mock := &MockEndpointInfo{ctrl: ctrl}
	mock.recorder = &MockEndpointInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointInfo) EXPECT() *MockEndpointInfoMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockEndpointInfo) Address() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockEndpointInfoMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockEndpointInfo)(nil).Address))
}

// DefaultTag mocks base method.
func (m *MockEndpointInfo) DefaultTag(key, def string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTag", key, def)
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultTag indicates an expected call of DefaultTag.
func (mr *MockEndpointInfoMockRecorder) DefaultTag(key, def any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTag", reflect.TypeOf((*MockEndpointInfo)(nil).DefaultTag), key, def)
}

// Method mocks base method.
func (m *MockEndpointInfo) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockEndpointInfoMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockEndpointInfo)(nil).Method))
}

// ServiceName mocks base method.
func (m *MockEndpointInfo) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockEndpointInfoMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockEndpointInfo)(nil).ServiceName))
}

// Tag mocks base method.
func (m *MockEndpointInfo) Tag(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Tag indicates an expected call of Tag.
func (mr *MockEndpointInfoMockRecorder) Tag(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockEndpointInfo)(nil).Tag), key)
}

// MockInvokeInfo is a mock of InvokeInfo interface.
type MockInvokeInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInvokeInfoMockRecorder
}

// MockInvokeInfoMockRecorder is the mock recorder for MockInvokeInfo.
type MockInvokeInfoMockRecorder struct {
	mock *MockInvokeInfo
}

// NewMockInvokeInfo creates a new mock instance.
func NewMockInvokeInfo(ctrl *gomock.Controller) *MockInvokeInfo {
	mock := &MockInvokeInfo{ctrl: ctrl}
	mock.recorder = &MockInvokeInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvokeInfo) EXPECT() *MockInvokeInfoMockRecorder {
	return m.recorder
}

// MethodPath mocks base method.
func (m *MockInvokeInfo) MethodPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// MethodPath indicates an expected call of MethodPath.
func (mr *MockInvokeInfoMockRecorder) MethodPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodPath", reflect.TypeOf((*MockInvokeInfo)(nil).MethodPath))
}

// ServicePath mocks base method.
func (m *MockInvokeInfo) ServicePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServicePath indicates an expected call of ServicePath.
func (mr *MockInvokeInfoMockRecorder) ServicePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePath", reflect.TypeOf((*MockInvokeInfo)(nil).ServicePath))
}

// MockRPCInfo is a mock of RPCInfo interface.
type MockRPCInfo struct {
	ctrl     *gomock.Controller
	recorder *MockRPCInfoMockRecorder
}

// MockRPCInfoMockRecorder is the mock recorder for MockRPCInfo.
type MockRPCInfoMockRecorder struct {
	mock *MockRPCInfo
}

// NewMockRPCInfo creates a new mock instance.
func NewMockRPCInfo(ctrl *gomock.Controller) *MockRPCInfo {
	mock := &MockRPCInfo{ctrl: ctrl}
	mock.recorder = &MockRPCInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCInfo) EXPECT() *MockRPCInfoMockRecorder {
	return m.recorder
}

// EndpointContext mocks base method.
func (m *MockRPCInfo) EndpointContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// EndpointContext indicates an expected call of EndpointContext.
func (mr *MockRPCInfoMockRecorder) EndpointContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointContext", reflect.TypeOf((*MockRPCInfo)(nil).EndpointContext))
}

// InteractionMode mocks base method.
func (m *MockRPCInfo) InteractionMode() InteractionMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionMode")
	ret0, _ := ret[0].(InteractionMode)
	return ret0
}

// InteractionMode indicates an expected call of InteractionMode.
func (mr *MockRPCInfoMockRecorder) InteractionMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionMode", reflect.TypeOf((*MockRPCInfo)(nil).InteractionMode))
}

// Invocation mocks base method.
func (m *MockRPCInfo) Invocation() Invocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invocation")
	ret0, _ := ret[0].(Invocation)
	return ret0
}

// Invocation indicates an expected call of Invocation.
func (mr *MockRPCInfoMockRecorder) Invocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invocation", reflect.TypeOf((*MockRPCInfo)(nil).Invocation))
}

// Recycle mocks base method.
func (m *MockRPCInfo) Recycle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recycle")
}

// Recycle indicates an expected call of Recycle.
func (mr *MockRPCInfoMockRecorder) Recycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recycle", reflect.TypeOf((*MockRPCInfo)(nil).Recycle))
}
