// Code generated by MockGen. DO NOT EDIT.
// Source: define.go
//
// Generated by this command:
//
//	mockgen -source=define.go -destination ./define_mock.go -package remote
//

// Package remote is a generated GoMock package.
package remote

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	netpoll "github.com/cloudwego/netpoll"
	rpcinfo "gitlab.dev.wiqun.com/tl/goserver/chat/l2/tl.gorpc.git/pkg/rpcinfo"
	gomock "go.uber.org/mock/gomock"
)

// MockSizeableMarshaller is a mock of SizeableMarshaller interface.
type MockSizeableMarshaller struct {
	ctrl     *gomock.Controller
	recorder *MockSizeableMarshallerMockRecorder
}

// MockSizeableMarshallerMockRecorder is the mock recorder for MockSizeableMarshaller.
type MockSizeableMarshallerMockRecorder struct {
	mock *MockSizeableMarshaller
}

// NewMockSizeableMarshaller creates a new mock instance.
func NewMockSizeableMarshaller(ctrl *gomock.Controller) *MockSizeableMarshaller {
	mock := &MockSizeableMarshaller{ctrl: ctrl}
	mock.recorder = &MockSizeableMarshallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSizeableMarshaller) EXPECT() *MockSizeableMarshallerMockRecorder {
	return m.recorder
}

// MarshalToSizedBuffer mocks base method.
func (m *MockSizeableMarshaller) MarshalToSizedBuffer(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalToSizedBuffer", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalToSizedBuffer indicates an expected call of MarshalToSizedBuffer.
func (mr *MockSizeableMarshallerMockRecorder) MarshalToSizedBuffer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalToSizedBuffer", reflect.TypeOf((*MockSizeableMarshaller)(nil).MarshalToSizedBuffer), arg0)
}

// Size mocks base method.
func (m *MockSizeableMarshaller) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockSizeableMarshallerMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSizeableMarshaller)(nil).Size))
}

// Unmarshal mocks base method.
func (m *MockSizeableMarshaller) Unmarshal(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockSizeableMarshallerMockRecorder) Unmarshal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockSizeableMarshaller)(nil).Unmarshal), arg0)
}

// MockCodec is a mock of Codec interface.
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *MockCodecMockRecorder
}

// MockCodecMockRecorder is the mock recorder for MockCodec.
type MockCodecMockRecorder struct {
	mock *MockCodec
}

// NewMockCodec creates a new mock instance.
func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &MockCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodec) EXPECT() *MockCodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockCodec) Decode(ctx context.Context, reader netpoll.Reader, msg Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", ctx, reader, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockCodecMockRecorder) Decode(ctx, reader, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCodec)(nil).Decode), ctx, reader, msg)
}

// Encode mocks base method.
func (m *MockCodec) Encode(ctx context.Context, writer netpoll.Writer, msg Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", ctx, writer, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockCodecMockRecorder) Encode(ctx, writer, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCodec)(nil).Encode), ctx, writer, msg)
}

// Name mocks base method.
func (m *MockCodec) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCodecMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCodec)(nil).Name))
}

// MockTransHandler is a mock of TransHandler interface.
type MockTransHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTransHandlerMockRecorder
}

// MockTransHandlerMockRecorder is the mock recorder for MockTransHandler.
type MockTransHandlerMockRecorder struct {
	mock *MockTransHandler
}

// NewMockTransHandler creates a new mock instance.
func NewMockTransHandler(ctrl *gomock.Controller) *MockTransHandler {
	mock := &MockTransHandler{ctrl: ctrl}
	mock.recorder = &MockTransHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransHandler) EXPECT() *MockTransHandlerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTransHandler) Read(ctx context.Context, end Endpoint, recv Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, end, recv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTransHandlerMockRecorder) Read(ctx, end, recv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransHandler)(nil).Read), ctx, end, recv)
}

// Write mocks base method.
func (m *MockTransHandler) Write(ctx context.Context, end Endpoint, send Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, end, send)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTransHandlerMockRecorder) Write(ctx, end, send any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTransHandler)(nil).Write), ctx, end, send)
}

// MockConnectionHandler is a mock of ConnectionHandler interface.
type MockConnectionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionHandlerMockRecorder
}

// MockConnectionHandlerMockRecorder is the mock recorder for MockConnectionHandler.
type MockConnectionHandlerMockRecorder struct {
	mock *MockConnectionHandler
}

// NewMockConnectionHandler creates a new mock instance.
func NewMockConnectionHandler(ctrl *gomock.Controller) *MockConnectionHandler {
	mock := &MockConnectionHandler{ctrl: ctrl}
	mock.recorder = &MockConnectionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionHandler) EXPECT() *MockConnectionHandlerMockRecorder {
	return m.recorder
}

// OnActive mocks base method.
func (m *MockConnectionHandler) OnActive(ctx context.Context, conn netpoll.Connection) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnActive", ctx, conn)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnActive indicates an expected call of OnActive.
func (mr *MockConnectionHandlerMockRecorder) OnActive(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnActive", reflect.TypeOf((*MockConnectionHandler)(nil).OnActive), ctx, conn)
}

// OnError mocks base method.
func (m *MockConnectionHandler) OnError(ctx context.Context, conn netpoll.Connection, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", ctx, conn, err)
}

// OnError indicates an expected call of OnError.
func (mr *MockConnectionHandlerMockRecorder) OnError(ctx, conn, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockConnectionHandler)(nil).OnError), ctx, conn, err)
}

// OnInactive mocks base method.
func (m *MockConnectionHandler) OnInactive(ctx context.Context, conn netpoll.Connection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnInactive", ctx, conn)
}

// OnInactive indicates an expected call of OnInactive.
func (mr *MockConnectionHandlerMockRecorder) OnInactive(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInactive", reflect.TypeOf((*MockConnectionHandler)(nil).OnInactive), ctx, conn)
}

// OnRead mocks base method.
func (m *MockConnectionHandler) OnRead(ctx context.Context, conn netpoll.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRead", ctx, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRead indicates an expected call of OnRead.
func (mr *MockConnectionHandlerMockRecorder) OnRead(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRead", reflect.TypeOf((*MockConnectionHandler)(nil).OnRead), ctx, conn)
}

// MockGracefulShutdown is a mock of GracefulShutdown interface.
type MockGracefulShutdown struct {
	ctrl     *gomock.Controller
	recorder *MockGracefulShutdownMockRecorder
}

// MockGracefulShutdownMockRecorder is the mock recorder for MockGracefulShutdown.
type MockGracefulShutdownMockRecorder struct {
	mock *MockGracefulShutdown
}

// NewMockGracefulShutdown creates a new mock instance.
func NewMockGracefulShutdown(ctrl *gomock.Controller) *MockGracefulShutdown {
	mock := &MockGracefulShutdown{ctrl: ctrl}
	mock.recorder = &MockGracefulShutdownMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGracefulShutdown) EXPECT() *MockGracefulShutdownMockRecorder {
	return m.recorder
}

// GracefulShutdown mocks base method.
func (m *MockGracefulShutdown) GracefulShutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GracefulShutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GracefulShutdown indicates an expected call of GracefulShutdown.
func (mr *MockGracefulShutdownMockRecorder) GracefulShutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulShutdown", reflect.TypeOf((*MockGracefulShutdown)(nil).GracefulShutdown), ctx)
}

// MockEndpoint is a mock of Endpoint interface.
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointMockRecorder
}

// MockEndpointMockRecorder is the mock recorder for MockEndpoint.
type MockEndpointMockRecorder struct {
	mock *MockEndpoint
}

// NewMockEndpoint creates a new mock instance.
func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &MockEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpoint) EXPECT() *MockEndpointMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEndpoint) Add(ctx context.Context, lb *netpoll.LinkBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, lb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEndpointMockRecorder) Add(ctx, lb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEndpoint)(nil).Add), ctx, lb)
}

// AddCloseCallback mocks base method.
func (m *MockEndpoint) AddCloseCallback(callback netpoll.CloseCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloseCallback", callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCloseCallback indicates an expected call of AddCloseCallback.
func (mr *MockEndpointMockRecorder) AddCloseCallback(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloseCallback", reflect.TypeOf((*MockEndpoint)(nil).AddCloseCallback), callback)
}

// Address mocks base method.
func (m *MockEndpoint) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockEndpointMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockEndpoint)(nil).Address))
}

// CallBackManager mocks base method.
func (m *MockEndpoint) CallBackManager() CallBackManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallBackManager")
	ret0, _ := ret[0].(CallBackManager)
	return ret0
}

// CallBackManager indicates an expected call of CallBackManager.
func (mr *MockEndpointMockRecorder) CallBackManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallBackManager", reflect.TypeOf((*MockEndpoint)(nil).CallBackManager))
}

// Close mocks base method.
func (m *MockEndpoint) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEndpointMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEndpoint)(nil).Close))
}

// Context mocks base method.
func (m *MockEndpoint) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEndpointMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEndpoint)(nil).Context))
}

// IsActive mocks base method.
func (m *MockEndpoint) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockEndpointMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockEndpoint)(nil).IsActive))
}

// LocalAddr mocks base method.
func (m *MockEndpoint) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockEndpointMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockEndpoint)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockEndpoint) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockEndpointMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEndpoint)(nil).Read), b)
}

// Reader mocks base method.
func (m *MockEndpoint) Reader() netpoll.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(netpoll.Reader)
	return ret0
}

// Reader indicates an expected call of Reader.
func (mr *MockEndpointMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockEndpoint)(nil).Reader))
}

// RemoteAddr mocks base method.
func (m *MockEndpoint) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockEndpointMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockEndpoint)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockEndpoint) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockEndpointMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockEndpoint)(nil).SetDeadline), t)
}

// SetIdleTimeout mocks base method.
func (m *MockEndpoint) SetIdleTimeout(timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIdleTimeout", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIdleTimeout indicates an expected call of SetIdleTimeout.
func (mr *MockEndpointMockRecorder) SetIdleTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdleTimeout", reflect.TypeOf((*MockEndpoint)(nil).SetIdleTimeout), timeout)
}

// SetOnRequest mocks base method.
func (m *MockEndpoint) SetOnRequest(on netpoll.OnRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOnRequest", on)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOnRequest indicates an expected call of SetOnRequest.
func (mr *MockEndpointMockRecorder) SetOnRequest(on any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnRequest", reflect.TypeOf((*MockEndpoint)(nil).SetOnRequest), on)
}

// SetReadDeadline mocks base method.
func (m *MockEndpoint) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockEndpointMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockEndpoint)(nil).SetReadDeadline), t)
}

// SetReadTimeout mocks base method.
func (m *MockEndpoint) SetReadTimeout(timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadTimeout", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadTimeout indicates an expected call of SetReadTimeout.
func (mr *MockEndpointMockRecorder) SetReadTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadTimeout", reflect.TypeOf((*MockEndpoint)(nil).SetReadTimeout), timeout)
}

// SetWriteDeadline mocks base method.
func (m *MockEndpoint) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockEndpointMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockEndpoint)(nil).SetWriteDeadline), t)
}

// SetWriteTimeout mocks base method.
func (m *MockEndpoint) SetWriteTimeout(timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteTimeout", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteTimeout indicates an expected call of SetWriteTimeout.
func (mr *MockEndpointMockRecorder) SetWriteTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteTimeout", reflect.TypeOf((*MockEndpoint)(nil).SetWriteTimeout), timeout)
}

// SliceIntoReader mocks base method.
func (m *MockEndpoint) SliceIntoReader(n int, r netpoll.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SliceIntoReader", n, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// SliceIntoReader indicates an expected call of SliceIntoReader.
func (mr *MockEndpointMockRecorder) SliceIntoReader(n, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SliceIntoReader", reflect.TypeOf((*MockEndpoint)(nil).SliceIntoReader), n, r)
}

// Write mocks base method.
func (m *MockEndpoint) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockEndpointMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEndpoint)(nil).Write), b)
}

// Writer mocks base method.
func (m *MockEndpoint) Writer() netpoll.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(netpoll.Writer)
	return ret0
}

// Writer indicates an expected call of Writer.
func (mr *MockEndpointMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockEndpoint)(nil).Writer))
}

// MockCallBackManager is a mock of CallBackManager interface.
type MockCallBackManager struct {
	ctrl     *gomock.Controller
	recorder *MockCallBackManagerMockRecorder
}

// MockCallBackManagerMockRecorder is the mock recorder for MockCallBackManager.
type MockCallBackManagerMockRecorder struct {
	mock *MockCallBackManager
}

// NewMockCallBackManager creates a new mock instance.
func NewMockCallBackManager(ctrl *gomock.Controller) *MockCallBackManager {
	mock := &MockCallBackManager{ctrl: ctrl}
	mock.recorder = &MockCallBackManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallBackManager) EXPECT() *MockCallBackManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCallBackManager) Delete(seqID uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", seqID)
}

// Delete indicates an expected call of Delete.
func (mr *MockCallBackManagerMockRecorder) Delete(seqID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCallBackManager)(nil).Delete), seqID)
}

// Load mocks base method.
func (m *MockCallBackManager) Load(seqID uint32) (chan netpoll.Reader, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", seqID)
	ret0, _ := ret[0].(chan netpoll.Reader)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCallBackManagerMockRecorder) Load(seqID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCallBackManager)(nil).Load), seqID)
}

// LoadAndDelete mocks base method.
func (m *MockCallBackManager) LoadAndDelete(seqID uint32) (chan netpoll.Reader, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAndDelete", seqID)
	ret0, _ := ret[0].(chan netpoll.Reader)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadAndDelete indicates an expected call of LoadAndDelete.
func (mr *MockCallBackManagerMockRecorder) LoadAndDelete(seqID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndDelete", reflect.TypeOf((*MockCallBackManager)(nil).LoadAndDelete), seqID)
}

// Set mocks base method.
func (m *MockCallBackManager) Set(seqID uint32, reader chan netpoll.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", seqID, reader)
}

// Set indicates an expected call of Set.
func (mr *MockCallBackManagerMockRecorder) Set(seqID, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCallBackManager)(nil).Set), seqID, reader)
}

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Codec mocks base method.
func (m *MockMessage) Codec() Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Codec")
	ret0, _ := ret[0].(Codec)
	return ret0
}

// Codec indicates an expected call of Codec.
func (mr *MockMessageMockRecorder) Codec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codec", reflect.TypeOf((*MockMessage)(nil).Codec))
}

// Data mocks base method.
func (m *MockMessage) Data() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(any)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockMessageMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockMessage)(nil).Data))
}

// Len mocks base method.
func (m *MockMessage) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockMessageMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockMessage)(nil).Len))
}

// Metadata mocks base method.
func (m *MockMessage) Metadata() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMessageMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMessage)(nil).Metadata))
}

// MsgType mocks base method.
func (m *MockMessage) MsgType() MessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgType")
	ret0, _ := ret[0].(MessageType)
	return ret0
}

// MsgType indicates an expected call of MsgType.
func (mr *MockMessageMockRecorder) MsgType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgType", reflect.TypeOf((*MockMessage)(nil).MsgType))
}

// Payload mocks base method.
func (m *MockMessage) Payload() netpoll.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].(netpoll.Reader)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockMessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMessage)(nil).Payload))
}

// RPCInfo mocks base method.
func (m *MockMessage) RPCInfo() rpcinfo.RPCInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCInfo")
	ret0, _ := ret[0].(rpcinfo.RPCInfo)
	return ret0
}

// RPCInfo indicates an expected call of RPCInfo.
func (mr *MockMessageMockRecorder) RPCInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCInfo", reflect.TypeOf((*MockMessage)(nil).RPCInfo))
}

// Recycle mocks base method.
func (m *MockMessage) Recycle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recycle")
}

// Recycle indicates an expected call of Recycle.
func (mr *MockMessageMockRecorder) Recycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recycle", reflect.TypeOf((*MockMessage)(nil).Recycle))
}

// SetData mocks base method.
func (m *MockMessage) SetData(data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetData", data)
}

// SetData indicates an expected call of SetData.
func (mr *MockMessageMockRecorder) SetData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockMessage)(nil).SetData), data)
}

// SetLen mocks base method.
func (m *MockMessage) SetLen(l int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLen", l)
}

// SetLen indicates an expected call of SetLen.
func (mr *MockMessageMockRecorder) SetLen(l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLen", reflect.TypeOf((*MockMessage)(nil).SetLen), l)
}

// SetMetadata mocks base method.
func (m *MockMessage) SetMetadata(metadata []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetadata", metadata)
}

// SetMetadata indicates an expected call of SetMetadata.
func (mr *MockMessageMockRecorder) SetMetadata(metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockMessage)(nil).SetMetadata), metadata)
}

// SetMsgType mocks base method.
func (m *MockMessage) SetMsgType(typ MessageType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMsgType", typ)
}

// SetMsgType indicates an expected call of SetMsgType.
func (mr *MockMessageMockRecorder) SetMsgType(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMsgType", reflect.TypeOf((*MockMessage)(nil).SetMsgType), typ)
}

// SetPayload mocks base method.
func (m *MockMessage) SetPayload(reader netpoll.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPayload", reader)
}

// SetPayload indicates an expected call of SetPayload.
func (mr *MockMessageMockRecorder) SetPayload(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayload", reflect.TypeOf((*MockMessage)(nil).SetPayload), reader)
}

// SetVersion mocks base method.
func (m *MockMessage) SetVersion(v Version) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", v)
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockMessageMockRecorder) SetVersion(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockMessage)(nil).SetVersion), v)
}

// Version mocks base method.
func (m *MockMessage) Version() Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(Version)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockMessageMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockMessage)(nil).Version))
}
